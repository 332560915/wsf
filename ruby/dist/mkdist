#!/usr/bin/env bash

function sync_content
{
	rsync ../../build/build.bat .
	echo "synchronizing build.bat ... done"

	rsync ../../build/build.sh .
	echo "synchronizing build.sh ... done"

	rsync ../../find_rbconfig.rb .
	echo "synchronizing find_rbconfig.rb ... done"

	rsync ../../build/extconf.rb .
	echo "synchronizing extconf.rb ... done"

	rsync ../../build/extconf-win32.rb .
	echo "synchronizing extconf-win32.rb ... done"

	# Generate WSFC Wrapper
	swig -ruby -I../../swig/ -outdir ./ -Wall WSFC.i
	echo "synchronizing WSFC_wrap.c ... done"

	# Create "lib" Directory
	if [ ! -e "lib" ]
	then
		mkdir lib
	fi

	rsync -r --exclude=.svn ../../src/config lib
	echo "synchronizing config ... done"

	rsync -r --exclude=.svn ../../src/logger lib
	echo "synchronizing logger ... done"
	
	rsync -r --exclude=.svn ../../src/util lib
	echo "synchronizing util ... done"
	
	rsync -r --exclude=.svn ../../src/wsf lib
	rsync ../../src/wsf.rb lib
	echo "synchronizing wsf ... done"
	
	rsync -r --exclude=.svn --exclude=*.o --exclude=Makefile --exclude=*.log --exclude=*.so ../../src/wsservice .
	echo "synchronizing wsservice ... done"
	
	rsync -r --exclude=.svn ../../samples .
	echo "synchronizing samples ... done"
	
	rsync ../../AUTHORS .
	echo "synchronizing AUTHORS ... done"

	rsync ../../COPYING .
	echo "synchronizing COPYING ... done"

	rsync ../../LICENSE .
	echo "synchronizing LICENSE ... done"

	rsync ../../NEWS .
	echo "synchronizing NEWS ... done"

	rsync ../../NOTICE .
	echo "synchronizing NOTICE ... done"

	rsync ../../README .
	echo "synchronizing README ... done"

	rsync ../../README.SAMPLES .
	echo "synchronizing README.SAMPLES ... done"

	echo
	echo "synchronizing content ... OK"
	echo
}

function create_package
{
	# Find revision number
	cd ..
	revision_number=`svn info | grep Revision`
	cd dist

	# Create directory
	rm -rf $1
	mkdir $1

	# Sync content
	cd $1
	sync_content
	echo $revision_number > .revision
	cd ..
	
	# Create Linux package
	tar -cvzf $1.tar.gz $1
	
	echo
	echo "Linux distribution package - $1.tar.gz... OK"
	echo

	# Create Win32 package
	zip -r $1.zip $1
	
	echo
	echo "Win32 distribution package - $1.zip ... OK"
	echo
}

function show_usage
{
	echo "Usage :"
	echo "--create [package-name]     create Linux and Win32 distribution packages."
	echo "--help                      show this usage message."
}

if [ $# -eq 0 ]
then
	show_usage
	exit -1
fi

if [ $1 == "--create" ]
then
	if [ ! -z $2 ]
	then
		create_package $2
	else
		show_usage
	fi
else
	show_usage
fi

exit 0
